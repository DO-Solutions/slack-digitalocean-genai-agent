from slack_bolt import Ack, Say, BoltContext
from logging import Logger
from ai.providers import get_provider_response
from slack_sdk import WebClient
from ..listener_utils.listener_constants import DEFAULT_LOADING_TEXT, SUMMARIZE_THREAD_PROMPT
from ..listener_utils.parse_conversation import parse_conversation

"""
Callback for handling the 'sailor-summary' command. It acknowledges the command, retrieves the thread's conversation,
parses it, and responds with a summary generated by the AI provider.
"""


def summary_callback(client: WebClient, ack: Ack, command, say: Say, logger: Logger, context: BoltContext):
    try:
        ack()
        user_id = context["user_id"]
        channel_id = context["channel_id"]
        thread_ts = command.get("thread_ts")

        # If not in a thread, inform the user
        if not thread_ts:
            client.chat_postEphemeral(
                channel=channel_id, 
                user=user_id, 
                text="Please run this command in a thread to summarize it."
            )
            return

        # Post a loading message
        loading_message = client.chat_postMessage(
            channel=channel_id,
            thread_ts=thread_ts,
            text=DEFAULT_LOADING_TEXT
        )

        # Get thread messages
        thread_messages = client.conversations_replies(
            channel=channel_id,
            ts=thread_ts
        )["messages"]

        # Parse conversation
        conversation = parse_conversation(thread_messages)
        
        # Get summary from AI provider
        summary = get_provider_response(user_id, SUMMARIZE_THREAD_PROMPT, conversation)

        # Update loading message with summary
        client.chat_update(
            channel=channel_id,
            ts=loading_message["ts"],
            text="Thread Summary",
            blocks=[
                {
                    "type": "rich_text",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {"type": "text", "text": "Thread Summary:"},
                            ]
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [{"type": "text", "text": summary}],
                        },
                    ],
                }
            ],
        )
    except Exception as e:
        logger.error(e)
        client.chat_postEphemeral(channel=channel_id, user=user_id, text=f"Received an error from Bolty:\n{e}") 