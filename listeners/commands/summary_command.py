from slack_bolt import Ack, Say, BoltContext
from logging import Logger
from ai.providers import get_provider_response
from slack_sdk import WebClient
from ..listener_utils.listener_constants import DEFAULT_LOADING_TEXT, SUMMARIZE_THREAD_PROMPT
from ..listener_utils.parse_conversation import parse_conversation
import re

"""
Callback for handling the 'sailor-summary' command. It acknowledges the command, parses the thread link,
retrieves the thread's conversation, and responds with a summary generated by the AI provider.
"""


def summary_callback(client: WebClient, ack: Ack, command, say: Say, logger: Logger, context: BoltContext):
    try:
        ack()
        user_id = context["user_id"]
        channel_id = context["channel_id"]
        thread_link = command.get("text", "").strip()

        # If no thread link provided, inform the user
        if not thread_link:
            client.chat_postEphemeral(
                channel=channel_id, 
                user=user_id, 
                text="Please provide a link to a Slack thread. Example: `/sailor-summary https://workspace.slack.com/archives/C12345678/p1234567890123456`"
            )
            return
        
        # Parse the thread link to extract channel ID and thread timestamp
        # Slack thread links format: https://workspace.slack.com/archives/C12345678/p1234567890123456
        thread_pattern = r'archives/([A-Z0-9]+)/p(\d+)'
        match = re.search(thread_pattern, thread_link)
        
        if not match:
            client.chat_postEphemeral(
                channel=channel_id, 
                user=user_id, 
                text="Invalid thread link format. Please provide a valid Slack thread link."
            )
            return
        
        thread_channel_id = match.group(1)
        # Convert the timestamp format from p1234567890123456 to 1234567890.123456
        thread_ts = match.group(2)
        if len(thread_ts) > 10:
            thread_ts = f"{thread_ts[:10]}.{thread_ts[10:]}"
        
        # Post a loading message
        loading_message = client.chat_postMessage(
            channel=channel_id,
            text=DEFAULT_LOADING_TEXT
        )

        # Get thread messages
        try:
            thread_messages = client.conversations_replies(
                channel=thread_channel_id,
                ts=thread_ts
            )["messages"]
        except Exception as e:
            client.chat_update(
                channel=channel_id,
                ts=loading_message["ts"],
                text=f"Error retrieving thread messages. Make sure Sailor has access to the channel and thread: {str(e)}"
            )
            return

        # Parse conversation
        conversation = parse_conversation(thread_messages)
        
        # Get summary from AI provider
        summary = get_provider_response(user_id, SUMMARIZE_THREAD_PROMPT, conversation)

        # Update loading message with summary
        client.chat_update(
            channel=channel_id,
            ts=loading_message["ts"],
            text="Thread Summary",
            blocks=[
                {
                    "type": "rich_text",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {"type": "text", "text": "Thread Summary:"},
                            ]
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [{"type": "text", "text": summary}],
                        },
                    ],
                }
            ],
        )
    except Exception as e:
        logger.error(e)
        client.chat_postEphemeral(channel=channel_id, user=user_id, text=f"Received an error from Bolty:\n{e}") 